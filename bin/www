#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('project-2-starter:server')
const http = require('http')
const mongoose = require('mongoose')
require('colors')
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Connect to MongoDB based on environment (test or dev).
 */
if (process.env.NODE_ENV === 'test') {
  mongoose.connect('mongodb://localhost/proj2-test')
  console.log('CONNECTING TO TEST SERVER...'.blue)
} else if (process.env.NODE_ENV === 'dev') {
  mongoose.connect('mongodb://localhost/proj2-dev')
  console.log('CONNECTING TO DEV SERVER...'.blue)
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
console.log('SERVER UP ON PORT '.blue + port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges')
    process.exit(1)
    break
  case 'EADDRINUSE':
    console.error(bind + ' is already in use')
    process.exit(1)
    break
  default:
    throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
